formatter: "markdown"

# Tested with this version
# As Majorversion is 0 any change may break
version: ">=0.16.0"

sections:
  hide:
    - header
    - providers

output:
  file: "README.md"
  mode: inject

sort:
  enabled: true
  by: required

content: |-
  {{- define "setDict" -}}
    {{- $resource := list -}}
    {{- if hasKey .Dict .Key -}}
      {{- $resource = get .Dict .Key -}}
    {{- else -}}
       {{- $resource = list -}}
    {{- end -}}
    {{- $resource := append $resource .Resource -}}
    {{- $_ := set .Dict .Key $resource -}}
  {{- end -}}

  {{- $filesResources := dict -}}
  {{- $resourceTypes := dict -}}
  {{- range .Module.Resources -}}
    {{- template "setDict" dict "Dict" $filesResources "Key" .Position.Filename "Resource" . -}}
    {{- $isResource := eq "resource" (printf "%s" .GetMode) -}}
    {{- if $isResource -}}
      {{- template "setDict" dict "Dict" $resourceTypes "Key" (printf "%s_%s" .ProviderName .Type) "Resource" . -}}
    {{- end -}}
  {{- end -}}
  {{ indent 0 "#" }} Usage

# Introduction
This module is intended for one-shot deployments only!

This module provides a oneshot deployment for a new application landing zone.
It creates the service connection, optionally moves the subscription to a new management group, creates a build validation policy and creates a new repository with the first pipeline settings and terraform files.

## Prerequisites
You need
- Personal Access Token for the DevOps Organization to create service connections and repositories
- Project Admin on DevOps Project
- Admin User to create the service principal in the Customer Tenant. If you want to move the subscription into a new management group you need an admin user directly in the tenant. AOBO will not work.

  {{ .Requirements }}
  {{ .Providers }}
  {{ .Inputs }}
  {{ .Outputs }}
  {{ if .Config.Sections.Resources -}}
    {{- if not (keys $resourceTypes) -}}
        {{- if not .Config.Settings.HideEmpty -}}
            {{- indent 0 "#" }} Resource types
            No resources.
        {{ end }}
      {{ else }}
        {{ indent 0 "#" }} Resource types
        | Type | Used |
        |------|-------|
        {{- range $type,$resources := $resourceTypes }}
          {{- $url := (first $resources).URL -}}
          {{- $type = ternary $url (printf "[%s](%s)" $type $url) $type }}
          | {{ $type }} | {{ len $resources }} |
        {{- end }}
        **`Used` only includes resource blocks.** `for_each` and `count` meta arguments, as well as resource blocks of modules are not considered.
      {{ end }}
  {{ end -}}
  {{ .Modules }}
  {{ if or .Config.Sections.Resources .Config.Sections.DataSources -}}
      {{- if not (keys $filesResources) -}}
          {{- if not .Config.Settings.HideEmpty -}}
              {{ indent 0 "#" }} Resources by Files
              No resources.
          {{ end }}
      {{ else }}
          {{ indent 0 "#" }} Resources by Files
          {{- range $fileName,$resources := $filesResources }}
              {{ indent 1 "#" }} {{ $fileName }}
              | Name | Type |
              |------|------|
              
              {{- range $resources -}}
                {{- $isResource := and $.Config.Sections.Resources ( eq "resource" (printf "%s" .GetMode)) }}
                {{- $isDataResource := and $.Config.Sections.DataSources ( eq "data source" (printf "%s" .GetMode)) }}
                {{- if or $isResource $isDataResource }}
                    {{- $fullspec := ternary .URL (printf "[%s](%s)" .Spec .URL) .Spec }}
                    | {{ $fullspec }} | {{ .GetMode }} |
                {{- end }}
              {{- end -}}
          {{- end }}
      {{ end }}
  {{- end -}}
